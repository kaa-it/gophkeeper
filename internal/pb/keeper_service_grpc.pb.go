// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: keeper_service.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeeperService_UploadCredentials_FullMethodName = "/gophkeeper.KeeperService/UploadCredentials"
	KeeperService_UploadCreditCard_FullMethodName  = "/gophkeeper.KeeperService/UploadCreditCard"
	KeeperService_UploadText_FullMethodName        = "/gophkeeper.KeeperService/UploadText"
	KeeperService_UploadFile_FullMethodName        = "/gophkeeper.KeeperService/UploadFile"
)

// KeeperServiceClient is the client API for KeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperServiceClient interface {
	UploadCredentials(ctx context.Context, in *UploadCredentialsRequest, opts ...grpc.CallOption) (*UploadCredentialsResponse, error)
	UploadCreditCard(ctx context.Context, in *UploadCreditCardRequest, opts ...grpc.CallOption) (*UploadCreditCardResponse, error)
	UploadText(ctx context.Context, in *UploadTextRequest, opts ...grpc.CallOption) (*UploadTextResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
}

type keeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperServiceClient(cc grpc.ClientConnInterface) KeeperServiceClient {
	return &keeperServiceClient{cc}
}

func (c *keeperServiceClient) UploadCredentials(ctx context.Context, in *UploadCredentialsRequest, opts ...grpc.CallOption) (*UploadCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadCredentialsResponse)
	err := c.cc.Invoke(ctx, KeeperService_UploadCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) UploadCreditCard(ctx context.Context, in *UploadCreditCardRequest, opts ...grpc.CallOption) (*UploadCreditCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadCreditCardResponse)
	err := c.cc.Invoke(ctx, KeeperService_UploadCreditCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) UploadText(ctx context.Context, in *UploadTextRequest, opts ...grpc.CallOption) (*UploadTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadTextResponse)
	err := c.cc.Invoke(ctx, KeeperService_UploadText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KeeperService_ServiceDesc.Streams[0], KeeperService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperService_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

// KeeperServiceServer is the server API for KeeperService service.
// All implementations must embed UnimplementedKeeperServiceServer
// for forward compatibility.
type KeeperServiceServer interface {
	UploadCredentials(context.Context, *UploadCredentialsRequest) (*UploadCredentialsResponse, error)
	UploadCreditCard(context.Context, *UploadCreditCardRequest) (*UploadCreditCardResponse, error)
	UploadText(context.Context, *UploadTextRequest) (*UploadTextResponse, error)
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	mustEmbedUnimplementedKeeperServiceServer()
}

// UnimplementedKeeperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeeperServiceServer struct{}

func (UnimplementedKeeperServiceServer) UploadCredentials(context.Context, *UploadCredentialsRequest) (*UploadCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCredentials not implemented")
}
func (UnimplementedKeeperServiceServer) UploadCreditCard(context.Context, *UploadCreditCardRequest) (*UploadCreditCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCreditCard not implemented")
}
func (UnimplementedKeeperServiceServer) UploadText(context.Context, *UploadTextRequest) (*UploadTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadText not implemented")
}
func (UnimplementedKeeperServiceServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedKeeperServiceServer) mustEmbedUnimplementedKeeperServiceServer() {}
func (UnimplementedKeeperServiceServer) testEmbeddedByValue()                       {}

// UnsafeKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServiceServer will
// result in compilation errors.
type UnsafeKeeperServiceServer interface {
	mustEmbedUnimplementedKeeperServiceServer()
}

func RegisterKeeperServiceServer(s grpc.ServiceRegistrar, srv KeeperServiceServer) {
	// If the following call pancis, it indicates UnimplementedKeeperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeeperService_ServiceDesc, srv)
}

func _KeeperService_UploadCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).UploadCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_UploadCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).UploadCredentials(ctx, req.(*UploadCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_UploadCreditCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCreditCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).UploadCreditCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_UploadCreditCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).UploadCreditCard(ctx, req.(*UploadCreditCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_UploadText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServiceServer).UploadText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeeperService_UploadText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServiceServer).UploadText(ctx, req.(*UploadTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeeperService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeeperServiceServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KeeperService_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

// KeeperService_ServiceDesc is the grpc.ServiceDesc for KeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.KeeperService",
	HandlerType: (*KeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadCredentials",
			Handler:    _KeeperService_UploadCredentials_Handler,
		},
		{
			MethodName: "UploadCreditCard",
			Handler:    _KeeperService_UploadCreditCard_Handler,
		},
		{
			MethodName: "UploadText",
			Handler:    _KeeperService_UploadText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _KeeperService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "keeper_service.proto",
}
